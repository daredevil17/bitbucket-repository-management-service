// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bitbucket-repository-management-service/dm/proto-files/service/todo-service.proto

package service

import (
	domain "bitbucket-repository-management-service/dm/grpc/domain"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("bitbucket-repository-management-service/dm/proto-files/service/todo-service.proto", fileDescriptor_afc5efc4cd32179e)
}

var fileDescriptor_afc5efc4cd32179e = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xbf, 0x8e, 0x13, 0x31,
	0x10, 0xc6, 0x95, 0xdc, 0x29, 0x91, 0x0c, 0x48, 0xc8, 0xc0, 0x21, 0x45, 0x14, 0x2b, 0xca, 0x13,
	0x5e, 0x5f, 0x42, 0xa4, 0x48, 0xa1, 0x21, 0x70, 0x42, 0xb4, 0x04, 0x68, 0xe8, 0x9c, 0xf5, 0xe0,
	0xf8, 0xf0, 0x7a, 0x8c, 0x3d, 0x7b, 0x07, 0x0f, 0x80, 0x44, 0x4d, 0x49, 0x41, 0xcb, 0x7b, 0xf0,
	0x64, 0x68, 0xff, 0x89, 0x3b, 0xb6, 0x81, 0x6b, 0x76, 0xf5, 0x7d, 0xfe, 0x7e, 0x33, 0x96, 0x3d,
	0x66, 0xaf, 0x76, 0x96, 0x76, 0x55, 0xf1, 0x01, 0x48, 0x44, 0x08, 0x98, 0x2c, 0x61, 0xfc, 0x2c,
	0x4a, 0xe5, 0x95, 0x81, 0x12, 0x3c, 0x89, 0x04, 0xf1, 0xdc, 0x16, 0x20, 0x75, 0x29, 0x43, 0x44,
	0x42, 0xf1, 0xde, 0x3a, 0x48, 0xb2, 0xb7, 0x09, 0x35, 0xf6, 0x99, 0xbc, 0x09, 0xf0, 0x69, 0x27,
	0x67, 0x2f, 0xaf, 0x59, 0x5b, 0x63, 0xa9, 0xac, 0x6f, 0x4a, 0xb7, 0x25, 0x67, 0x0f, 0x0c, 0xa2,
	0x71, 0x20, 0x55, 0xb0, 0x52, 0x79, 0x8f, 0xa4, 0xc8, 0xa2, 0x4f, 0xdd, 0xea, 0xa3, 0xe6, 0x57,
	0x08, 0x03, 0x5e, 0xa4, 0x0b, 0x65, 0x0c, 0x44, 0x89, 0xa1, 0x49, 0x0c, 0xd3, 0x8b, 0x9f, 0x63,
	0x76, 0xe3, 0x0d, 0x9e, 0xe2, 0xeb, 0xb6, 0x39, 0x5f, 0xb1, 0xc9, 0xf3, 0x08, 0x8a, 0x80, 0xdf,
	0xcb, 0xdb, 0xce, 0x79, 0xab, 0xb7, 0xf0, 0xb1, 0x82, 0x44, 0xb3, 0xa3, 0xbf, 0xed, 0x14, 0xd0,
	0x27, 0xe0, 0x73, 0x76, 0xb8, 0x05, 0xa5, 0xf9, 0x9d, 0x7e, 0xbd, 0x56, 0x3d, 0x74, 0xf7, 0xaa,
	0xd9, 0x21, 0x2b, 0x36, 0x79, 0x1b, 0xf4, 0x95, 0x5e, 0xad, 0x1e, 0xf4, 0xea, 0xed, 0x3f, 0xe0,
	0x29, 0x38, 0xb8, 0x0c, 0xb6, 0x7a, 0x00, 0xf6, 0x76, 0x07, 0xae, 0xd9, 0xb4, 0xde, 0xc1, 0xc6,
	0x39, 0x7e, 0x74, 0x79, 0x4b, 0x1b, 0xe7, 0x7a, 0xf4, 0xfe, 0xc0, 0x6f, 0xd9, 0x67, 0xbf, 0xc6,
	0xdf, 0x36, 0x5f, 0xc6, 0xfc, 0xc7, 0x88, 0xdd, 0xac, 0x0f, 0x2c, 0xeb, 0xae, 0xeb, 0xe1, 0xd7,
	0x11, 0x93, 0x06, 0x85, 0x89, 0xa1, 0x10, 0x7b, 0xa2, 0x20, 0x22, 0x24, 0x12, 0xa5, 0x2d, 0x22,
	0x76, 0x11, 0x41, 0x15, 0x61, 0xb4, 0xca, 0x65, 0x21, 0xe2, 0x19, 0x14, 0xc4, 0x5f, 0xd4, 0xc1,
	0xb4, 0x96, 0xd2, 0x58, 0xda, 0x57, 0xbb, 0xbc, 0xc0, 0x52, 0x6a, 0x15, 0x41, 0xc3, 0xb9, 0x75,
	0xf3, 0x95, 0xfc, 0xc7, 0x51, 0x99, 0xdd, 0x22, 0x48, 0xf4, 0xb4, 0xfe, 0xd4, 0x25, 0x16, 0x07,
	0xf3, 0xfc, 0xe4, 0x78, 0x34, 0x5a, 0xdc, 0x56, 0x21, 0x38, 0x5b, 0x34, 0x17, 0x2d, 0xcf, 0x12,
	0xfa, 0xf5, 0xc0, 0xd9, 0x3e, 0x61, 0x07, 0xcb, 0x93, 0x25, 0x5f, 0xb2, 0xe3, 0x2d, 0x50, 0x15,
	0x3d, 0xe8, 0xec, 0x62, 0x0f, 0x3e, 0xa3, 0x3d, 0x64, 0x11, 0x12, 0x56, 0xb1, 0x80, 0x4c, 0x23,
	0xa4, 0xcc, 0x23, 0x65, 0xf0, 0xc9, 0x26, 0xca, 0xf9, 0x84, 0x1d, 0x7e, 0x1f, 0x8f, 0xa6, 0xef,
	0x56, 0xff, 0x31, 0xcb, 0xf5, 0xc1, 0xf4, 0x0f, 0x64, 0x37, 0x69, 0xa6, 0xee, 0xf1, 0xef, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xb5, 0x66, 0x67, 0xd2, 0x69, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ToDoServiceClient is the client API for ToDoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ToDoServiceClient interface {
	// Create new todo task
	Create(ctx context.Context, in *domain.CreateRequest, opts ...grpc.CallOption) (*domain.CreateResponse, error)
	// Read todo task
	Read(ctx context.Context, in *domain.ReadRequest, opts ...grpc.CallOption) (*domain.ReadResponse, error)
	// Update todo task
	Update(ctx context.Context, in *domain.UpdateRequest, opts ...grpc.CallOption) (*domain.UpdateResponse, error)
	// Delete todo task
	Delete(ctx context.Context, in *domain.DeleteRequest, opts ...grpc.CallOption) (*domain.DeleteResponse, error)
	// Read all todo tasks
	ReadAll(ctx context.Context, in *domain.ReadAllRequest, opts ...grpc.CallOption) (*domain.ReadAllResponse, error)
}

type toDoServiceClient struct {
	cc *grpc.ClientConn
}

func NewToDoServiceClient(cc *grpc.ClientConn) ToDoServiceClient {
	return &toDoServiceClient{cc}
}

func (c *toDoServiceClient) Create(ctx context.Context, in *domain.CreateRequest, opts ...grpc.CallOption) (*domain.CreateResponse, error) {
	out := new(domain.CreateResponse)
	err := c.cc.Invoke(ctx, "/service.ToDoService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoServiceClient) Read(ctx context.Context, in *domain.ReadRequest, opts ...grpc.CallOption) (*domain.ReadResponse, error) {
	out := new(domain.ReadResponse)
	err := c.cc.Invoke(ctx, "/service.ToDoService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoServiceClient) Update(ctx context.Context, in *domain.UpdateRequest, opts ...grpc.CallOption) (*domain.UpdateResponse, error) {
	out := new(domain.UpdateResponse)
	err := c.cc.Invoke(ctx, "/service.ToDoService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoServiceClient) Delete(ctx context.Context, in *domain.DeleteRequest, opts ...grpc.CallOption) (*domain.DeleteResponse, error) {
	out := new(domain.DeleteResponse)
	err := c.cc.Invoke(ctx, "/service.ToDoService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoServiceClient) ReadAll(ctx context.Context, in *domain.ReadAllRequest, opts ...grpc.CallOption) (*domain.ReadAllResponse, error) {
	out := new(domain.ReadAllResponse)
	err := c.cc.Invoke(ctx, "/service.ToDoService/ReadAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToDoServiceServer is the server API for ToDoService service.
type ToDoServiceServer interface {
	// Create new todo task
	Create(context.Context, *domain.CreateRequest) (*domain.CreateResponse, error)
	// Read todo task
	Read(context.Context, *domain.ReadRequest) (*domain.ReadResponse, error)
	// Update todo task
	Update(context.Context, *domain.UpdateRequest) (*domain.UpdateResponse, error)
	// Delete todo task
	Delete(context.Context, *domain.DeleteRequest) (*domain.DeleteResponse, error)
	// Read all todo tasks
	ReadAll(context.Context, *domain.ReadAllRequest) (*domain.ReadAllResponse, error)
}

// UnimplementedToDoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedToDoServiceServer struct {
}

func (*UnimplementedToDoServiceServer) Create(ctx context.Context, req *domain.CreateRequest) (*domain.CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedToDoServiceServer) Read(ctx context.Context, req *domain.ReadRequest) (*domain.ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedToDoServiceServer) Update(ctx context.Context, req *domain.UpdateRequest) (*domain.UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedToDoServiceServer) Delete(ctx context.Context, req *domain.DeleteRequest) (*domain.DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedToDoServiceServer) ReadAll(ctx context.Context, req *domain.ReadAllRequest) (*domain.ReadAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAll not implemented")
}

func RegisterToDoServiceServer(s *grpc.Server, srv ToDoServiceServer) {
	s.RegisterService(&_ToDoService_serviceDesc, srv)
}

func _ToDoService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ToDoService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServiceServer).Create(ctx, req.(*domain.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDoService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ToDoService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServiceServer).Read(ctx, req.(*domain.ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDoService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ToDoService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServiceServer).Update(ctx, req.(*domain.UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDoService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ToDoService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServiceServer).Delete(ctx, req.(*domain.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDoService_ReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.ReadAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServiceServer).ReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ToDoService/ReadAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServiceServer).ReadAll(ctx, req.(*domain.ReadAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ToDoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.ToDoService",
	HandlerType: (*ToDoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ToDoService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ToDoService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ToDoService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ToDoService_Delete_Handler,
		},
		{
			MethodName: "ReadAll",
			Handler:    _ToDoService_ReadAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitbucket-repository-management-service/dm/proto-files/service/todo-service.proto",
}
